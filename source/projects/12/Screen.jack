// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean _color, WHITE, BLACK;
    static int _rows, _cols, _addr;
    static Array _twoToThe;

    /** Initializes the Screen. */
    function void init() {
        var int i;

        let _twoToThe = Array.new(16);
        let _twoToThe[0] = 1;
        let i = 1;
        while (i < 16) {
            let _twoToThe[i] = _twoToThe[i - 1] + _twoToThe[i - 1];
            let i = i + 1;
        }

        let _rows = 256;
        let _cols = 512;
        let _addr = 16384;
        let WHITE = false;
        let BLACK = true;
        let _color = BLACK;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var boolean lastColor;

        let lastColor = _color;

        do Screen.setColor(WHITE);
        do Screen.drawRectangle(0, 0, _cols - 1, _rows - 1);
        do Screen.setColor(lastColor);
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let _color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int byte, bit, memByte, bitMask;

        if ((x > -1) & (x < _cols) & (y > -1) & (y < _rows)) {
            let byte = _addr + (y * 32) + (x / 16);
            let memByte = Memory.peek(byte);
            let bit = x - (16 * (x / 16)); //x % 16
            let bitMask = _twoToThe[bit];
            if (_color) {
                let memByte = memByte | bitMask;
            } else {
                let memByte = memByte & (~bitMask);
            }
            do Memory.poke(byte, memByte);
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy;

        let dx = x2 - x1;
        let dy = y2 - y1;

        if (dy = 0) {
            do Screen.drawHorizantalLine(x1, x2, y1);
            return;
        }

        if (dx = 0) {
            do Screen.drawVerticalLine(y1, y2, x1);
            return;
        }

        do Screen.drawDiagonalLine(x1, y1, x2, y2);
        return;
    }

    /* Draws a horizantal line from pixel (x1,y) to pixel (x2,y), using the current color. */
    function void drawHorizantalLine(int x1, int x2, int y) {
        var int dx;

        let dx = x2 - x1;

        if (dx < 0) {
            while (x1 > x2) {
                do Screen.drawPixel(x1, y);
                let x1 = x1 - 1;
            }
        } else {
            while (x1 < x2) {
                do Screen.drawPixel(x1, y);
                let x1 = x1 + 1;
            }
        }

        return;
    }

    /* Draws a vertical line from pixel (x,y1) to pixel (x,y2), using the current color. */
    function void drawVerticalLine(int y1, int y2, int x) {
        var int dy;

        let dy = y2 - y1;

        if (dy < 0) {
            while (y1 > y2) {
                do Screen.drawPixel(x, y1);
                let y1 = y1 - 1;
            }
        } else {
            while (y1 < y2) {
                do Screen.drawPixel(x, y1);
                let y1 = y1 + 1;
            }
        }

        return;
    }

    /* Draws a diagonal line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawDiagonalLine(int x1, int y1, int x2, int y2) {
        var int a, b, diff, dx, dy;

        let a = 0;
        let b = 0;
        let diff = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;

        while (~(Math.abs(a) > Math.abs(dx)) & ~(Math.abs(b) > Math.abs(dy))) {
            do Screen.drawPixel(x1 + a, y1 + b);

            if (diff < 0) {
                if (dx > 0) {
                    let a = a + 1;
                } else {
                    let a = a - 1;
                }
                let diff = diff + Math.abs(dy);
            } else {
                if (dy > 0) {
                    let b = b + 1;
                } else {
                    let b = b - 1;
                }
                let diff = diff - Math.abs(dx);
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (y1 < y2) {
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, rSquared, dySquared, dx;

        let dy = -r;
        let rSquared = r * r;

        while (dy < (r + 1)) {
            let dySquared = dy * dy;
            let dx = Math.sqrt(rSquared - dySquared);
            do Screen.drawLine(x - dx, y + dy, x + dx, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
