// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int _length, _maxLength;
    field Array _charbuf;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let _length = 0;
        let _maxLength = maxLength;
        if (_maxLength = 0) {
            let _charbuf = Array.new(1);
        } else {
            let _charbuf = Array.new(maxLength);
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do _charbuf.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return _length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j < _length) {
            return _charbuf[j];
        }
        return 0;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j < _length) {
            let _charbuf[j] = c;
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        var Array newCharbuf;
        var int i;

        if (_length = _maxLength) {
            let _maxLength = _maxLength * 2;
            let newCharbuf = Array.new(_maxLength);
            let i = 0;
            while (i < _length) {
                let newCharbuf[i] = _charbuf[i]; //copy the old buf to the new one
            }
            do _charbuf.dispose(); //deallocate the old buf
            let _charbuf = newCharbuf;
        }

        let _charbuf[_length] = c;
        let _length = _length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (_length > 0) {
            let _length = _length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i, d, c;
        var boolean neg;

        let val = 0;
        let i = 0;
        
        let neg = false;
        if (charAt(0) = 45) {
            let neg = true;
            let i = 1;
        }

        while (i < _length) {
            let c = charAt(i);
            if ((c > 47) & (c < 58)) {
                let d = c - 48;
                let val = (val * 10) + d;
                let i = i + 1;
            } else {
                return val;
            }
        }

        if (neg) {
            let val = -val;
        }

        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int valSave, lastDigit, i, nextVal, c;

        do clear();

        let valSave = val; //save for the end to add negative sign if needed
        
        if (val < 0) {
            let val = -val;
        }

        while (val > 0) {
            let nextVal = val / 10;
            let lastDigit = val - (nextVal * 10); //same as val % 10
            let c = lastDigit + 48;
            do appendChar(c);
            let val = nextVal;
        }

        if (valSave < 0) {
            do appendChar(45); // - for negative numbers
        }

        do reverse();
        return;
    }

    /** Sets this string to the empty string */
    method void clear() {
        while (_length > 0) {
            do eraseLastChar();
        }
        return;
    }

    /** Reverses the string */
    method void reverse() {
        var Array newCharbuf, i;

        let newCharbuf = Array.new(_maxLength);

        let i = 0;
        while (i < _length) {
            let newCharbuf[_length - i - 1] = _charbuf[i];
            let i = i + 1;
        }

        do _charbuf.dispose();
        let _charbuf = newCharbuf;
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
